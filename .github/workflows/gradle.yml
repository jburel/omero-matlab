---
name: Gradle

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * 0'

jobs:
  build:
    strategy:
      matrix:
        java: [1.8, 11]
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    env:
      gradle_version: 5.2.1 # set to empty to build with most recent version of gradle
      gradle_commands: build # default is build
      publish_target: github # where to publish the artifact
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Wrap with specified version
        run: gradle wrapper --gradle-version=${{ env.gradle_version }}
        if: ${{ env.gradle_version != '' }}
      - name: Wrap without version
        run: gradle wrapper
        if: ${{ env.gradle_version == '' }}
      - name: Run commands
        run: ./gradlew ${{ env.gradle_commands }}
      - name: Get Version from tag
        if: startsWith(github.ref, 'refs/tags')
        id: get_version
        run: echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/v}
        shell: bash
      - name: Create GitHub Release
        if: startsWith(matrix.os, 'ubuntu') && startsWith(github.ref, 'refs/tags') && env.publish_target == 'github' && matrix.java == '1.8'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
      - name: Upload Release Asset to GiHub
        if: startsWith(matrix.os, 'ubuntu') && startsWith(github.ref, 'refs/tags') && env.publish_target == 'github' && matrix.java == '1.8'
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: build/distributions/OMERO.matlab-${{ steps.get_version.outputs.SOURCE_TAG }}.zip
          asset_name: OMERO.matlab-${{ steps.get_version.outputs.SOURCE_TAG }}.zip
          asset_content_type: application/zip


